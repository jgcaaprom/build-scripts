#!/bin/bash

# Copyright (C) 2014 The SaberMod Project
# This file is free software; The SaberMod Project
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

###########################################################################
###########################################################################
#####
#####  C O N F I G U R A T I O N
#####
###########################################################################
###########################################################################

panic ()
{
    echo "ERROR: $@"
    exit 1
}

# Some predefined configurations
export SET_GCC_VERSION=aosp-4.9;
export SET_CLOOG_VERSION=0.18.3;
export SET_ISL_VERSION=0.14;
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01';

# Make sure gcc is on the right remote branch 4.9.x
# Remove all and git reset --hard so there's no conflicts between branches
cd ../gcc/gcc-SaberMod && rm -rf * && git reset --hard && git fetch sm $SET_GCC_VERSION && git checkout FETCH_HEAD && cd ../../build;

# Try to parallelize the build for faster performance.
JOBS="$(cat /proc/cpuinfo | grep -c processor)";

# Determine Make flags
MAKE_FLAGS=-j"$JOBS"

# Make a clean build
if [ -e Makefile ];
then
    make $MAKE_FLAGS clean;
    make $MAKE_FLAGS distclean;
fi;

# Remove all untracked files and directories in git
if [ -d expat-2.0.1 ];
then
    rm -rf expat-2.0.1;
fi;
if [ -d gmp-gnu ];
then
    rm -rf gmp-gnu;
fi;

export PREFIX_PATH=~/tmp/aarch64-linux-android-4.9;
export PREFIX=--prefix=$PREFIX_PATH;

if [ -d "$PREFIX_PATH" ];
then
    rm -rf $PREFIX_PATH;
    mkdir -p $PREFIX_PATH;
else
    mkdir -p $PREFIX_PATH;
fi;

export GCC_INSTALLED=$PREFIX_PATH/bin/aarch64-linux-android-gcc;

# sysroot
cd ../sysroot && rm -rf * && git reset --hard && git fetch sm gcc-4.9 && git checkout FETCH_HEAD && cd ../build;
export SYSROOT_SRC_PATH=../sysroot/arch-arm64;
export SYSROOT_DEST_PATH=$PREFIX_PATH/arch-arm64;
cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;

#Build Configuration
./configure $PREFIX $SYSROOT --host=x86_64-linux-gnu --build=x86_64-linux-gnu --target=aarch64-linux-android --program-transform-name='s&^&aarch64-linux-android-&' --with-gcc-version=SaberMod --with-pkgversion='SaberMod-4.9.x_android-graphite' --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-ld=default --disable-gold --enable-plugins --enable-threads --disable-option-checking --disable-bootstrap --disable-libmudflap --disable-libquadmath --disable-libsanitizer --enable-initfini-array --enable-eh-frame-hdr-for-static --enable-fix-cortex-a53-835769 --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++;

# Build and install cloog and isl libraries into the toolchain sysroot environment.

# CLOOG
export CLOOG_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
export CLOOG_PREFIX=--prefix=$CLOOG_PREFIX_PATH;

cd ../cloog/cloog-$SET_CLOOG_VERSION;
./configure $CLOOG_PREFIX;

make $MAKE_FLAGS;
make install;

# cleanup
make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

# untracked files
rm -rf cloog-isl-uninstalled.pc cloog-isl-uninstalled.sh cloog-isl.pc cloog-isl.pc.in doc/gitversion.texi version.h isl/gitversion.h isl/include/isl/stdint.h isl/isl-uninstalled.pc isl/isl-uninstalled.sh isl/isl.pc isl/isl.pc.in;

git reset --hard;

cd isl && git reset --hard;

# ISL

export ISL_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
export ISL_PREFIX=--prefix=$ISL_PREFIX_PATH;

cd ../../../isl/isl-$SET_ISL_VERSION;
./configure $ISL_PREFIX;

make $MAKE_FLAGS;
make install;

# cleanup
make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

# untracked files
rm -rf gitversion.h include/isl/stdint.h isl-uninstalled.pc isl-uninstalled.sh isl.pc isl.pc.in;

git reset --hard;

# make libs available for ld and cc
export SYSROOT_LIB_PATH=$PREFIX_PATH/lib;
export LD_LIBRARY_PATH=$SYSROOT_LIB_PATH;
export LIBRARY_PATH=$SYSROOT_LIB_PATH;

cd ../../build;

# Build the toolchain
make $MAKE_FLAGS;

# Install the toolchain (twice)
make install && make install;

# Did we make it?
if [ -e $GCC_INSTALLED ];
then
    echo "";
else
    ./build-failed;
fi;

cd ../build-scripts;

